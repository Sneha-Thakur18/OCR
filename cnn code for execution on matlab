The following code is to create a network on Matlab : 
function net = create_network(target)
% CREATE_NETWORK - Create a Hopfield network
%
% Arguments:
% target - Target vectors used to define stable points.
%
% Returns:
% net - Network object created
%
target = imcomplement(imcomplement(target)*2); % target -> [-1 1]
net = newhop(target);


Code to generate chars:
function [alphabet,targets] = generate_chars()
% GENERATE_CHARS � Create target patterns
%
% Returns:
% alphabet - 35x31 matrix of 5x7 bit maps for each letter.
% targets - 31x31 target vectors.
%[alphabetC,targets] = prprob; % capital characters
% add 5 lower case characters of my name: jin yu






one=[
0 0 1 1 1 1 1 1 1 1 0 0 ...
0 1 0 0 0 0 0 0 0 1 0 0 ...
0 1 0 0 0 0 0 0 0 1 1 0 ...
0 1 0 0 0 0 0 0 0 1 1 0 ...
0 1 0 0 0 0 0 1 1 1 1 0 ...
0 0 1 1 1 1 1 0 0 1 1 0 ...
0 0 0 0 0 0 0 0 0 1 0 0 ...
0 0 0 0 0 0 0 0 0 1 0 0 ...
0 0 0 0 0 0 0 0 0 1 0 0 ...
0 0 0 0 0 0 0 0 0 1 0 0 ...
0 0 0 0 0 0 0 0 0 1 0 0 ...
0 0 0 0 0 0 0 0 0 0 1 0 ]';

two=[
0 1 1 1 1 1 1 0 0 0 0 0 ...
0 0 0 0 0 0 1 1 0 0 0 0 ...
0 0 0 0 0 0 0 1 1 0 0 0 ...
0 0 0 0 0 0 0 1 1 0 0 0 ...
0 0 0 0 0 0 0 1 1 0 0 0 ...
0 0 0 0 0 0 0 1 1 0 0 0 ...
0 0 0 0 0 0 0 1 1 0 0 0 ...
0 0 1 0 0 0 0 1 0 0 0 0 ...
0 1 1 1 1 1 1 1 0 0 0 0 ...
0 0 0 0 0 0 1 1 1 0 0 0 ...
0 0 0 0 0 0 0 0 1 1 1 1 ...
0 0 0 0 0 0 0 0 0 0 0 1]';


three=[
0 1 1 1 1 1 1 1 1 0 0 0 ...
1 0 0 0 0 0 0 0 1 1 0 0 ...
0 0 0 0 0 0 0 0 1 1 0 0 ...
0 0 0 0 0 0 0 0 0 1 0 0 ...
0 0 0 0 0 0 0 0 0 1 0 0 ...
0 0 0 0 0 0 0 1 1 1 0 0 ...
0 0 0 1 1 0 0 0 1 1 1 0 ...
0 0 0 0 0 0 0 0 0 0 1 0 ...
0 0 0 0 0 0 0 0 0 0 1 1 ...
0 0 0 0 0 0 0 0 0 1 1 0 ...
1 1 1 1 1 0 1 1 1 0 0 0 ...
0 0 0 0 0 1 1 1 1 1 1 1
]';


four=[
0 1 0 0 0 0 0 0 1 0 0 0 ...
1 1 0 0 0 0 0 0 1 1 0 0 ...
1 1 0 0 0 0 0 0 0 1 0 0 ...
1 1 0 0 0 0 0 0 0 1 0 0 ...
0 1 0 0 0 0 0 0 1 1 0 0 ...
0 0 1 1 1 1 1 1 1 1 0 0 ...
0 0 1 1 0 0 0 0 0 0 1 0 ...
0 0 1 1 0 0 0 0 0 0 1 1 ...
0 0 1 1 0 0 0 0 0 0 0 1 ...
0 0 0 1 0 0 0 0 0 0 1 1 ...
0 0 0 1 1 1 0 0 0 1 1 0 ...
0 0 0 0 0 1 1 1 1 0 0 0]';


five=[0 1 1 1 0 0 0 0 0 0 1 1 ...
0 0 0 0 1 0 0 0 0 0 1 0 ...
0 0 0 0 1 0 0 0 0 0 1 0 ...
0 0 0 0 1 0 0 0 0 0 1 0 ...
0 0 0 0 1 0 0 0 0 0 1 0 ...
0 1 1 1 1 0 0 0 0 0 1 0 ...
0 1 1 1 0 0 0 0 0 1 1 0 ...
0 0 0 1 1 1 1 1 1 1 1 0 ...
0 0 0 0 0 0 0 0 0 0 1 0 ...
0 0 0 0 0 0 0 0 0 0 1 0 ...
0 0 0 0 0 0 0 0 0 0 1 0 ...
0 0 0 0 0 0 0 0 0 0 1 0]';
six=[
0 0 0 0 0 0 0 0 1 1 0 0 ...
0 0 0 0 0 0 1 1 0 0 0 0 ...
0 0 0 0 0 0 1 1 1 1 0 0 ...
0 0 0 0 1 1 1 0 0 0 0 0 ...
0 0 1 1 0 0 0 0 0 0 0 0 ...
0 1 1 0 0 0 0 0 0 0 0 0 ...
0 1 0 0 0 0 0 0 0 0 0 0 ...
0 0 1 1 1 1 1 1 1 1 0 0 ...
0 0 0 0 1 1 0 0 0 0 0 0 ...
0 0 0 1 0 0 0 0 0 0 0 0 ...
0 0 0 1 0 0 0 0 0 0 0 0 ...
0 0 0 1 1 1 1 1 1 1 1 1 ]';
seven=[
0 0 0 0 0 1 1 1 1 1 0 0 ...
0 0 0 0 1 0 0 0 0 1 0 0 ...
0 0 0 0 0 0 0 0 0 1 0 0 ...
0 0 0 0 0 0 0 0 0 1 0 0 ...
0 0 0 0 0 0 0 0 1 0 0 0 ...
0 0 0 0 0 0 0 1 0 0 0 0 ...
0 0 0 0 0 0 1 1 0 0 0 0 ...
0 0 0 0 0 1 1 0 0 0 0 0 ...
0 0 0 0 1 0 0 0 0 0 0 0 ...
0 0 0 1 0 0 0 0 0 0 0 0 ...
0 1 1 0 0 0 0 0 0 0 0 0 ...
0 1 0 0 0 0 0 0 0 0 0 0]';
eight=[
0 0 0 0 0 0 0 0 0 0 0 0 ...
0 1 1 0 0 0 0 0 0 0 0 0 ...
0 1 1 0 0 0 0 0 0 0 0 0 ...
0 1 1 1 1 1 1 1 1 0 0 0 ...
0 0 1 0 0 0 0 0 0 0 0 0 ...
0 0 1 0 0 0 0 0 0 0 0 0 ...
0 0 1 0 0 0 0 0 0 0 0 0 ...
0 0 1 0 0 0 0 0 0 0 0 0 ...
0 0 1 0 0 0 0 0 0 0 0 0 ...
0 0 1 1 0 0 0 0 0 0 0 0 ...
0 0 0 1 1 1 1 0 0 0 0 0 ...
0 0 0 0 0 1 1 1 1 1 1 1 ]';
nine=[0 0 0 0 0 0 0 0 0 1 0 0 ...
0 0 0 0 0 0 0 1 1 1 0 0 ...
0 0 0 0 0 0 0 1 1 0 0 0 ...
0 1 1 0 0 0 0 1 1 0 0 0 ...
0 1 1 1 1 1 1 1 1 0 0 0 ...
0 0 1 0 0 0 0 0 0 0 0 0 ...
0 0 1 0 0 0 0 0 0 0 0 0 ...
0 0 1 0 0 0 0 0 0 0 0 0 ...
0 0 1 0 0 0 0 0 0 0 0 0 ...
0 0 1 1 0 0 0 0 0 0 0 0 ...
0 0 0 1 1 0 0 0 0 1 1 0 ...
0 0 0 0 1 1 1 1 1 1 1 0 ]';
zero=[
0 0 1 1 1 1 1 1 1 1 0 0 ...
0 1 0 0 0 0 0 0 0 0 1 0 ...
1 0 0 0 0 0 0 0 0 0 1 0 ...
1 0 0 0 0 0 0 0 0 0 0 1 ...
1 0 0 0 0 0 0 0 0 0 0 1 ...
1 0 0 0 0 0 0 0 0 0 0 1 ...
1 0 0 0 0 0 0 0 0 0 0 1 ...
1 0 0 0 0 0 0 0 0 0 0 1 ...
1 0 0 0 0 0 0 0 0 0 0 1 ...
1 0 0 0 0 0 0 0 0 0 0 1 ...
1 0 0 0 0 0 0 0 0 0 1 0 ...
0 1 1 1 1 1 1 1 1 1 0 0]';


name = [one,two,three,four,five,six,seven,eight,nine,zero];
alphabet = [name];

% show the image of alphabet
figure;
for i=1:size(alphabet,2)
subplot(4,5,i);
colormap('summer');
imagesc(reshape(alphabet(:,i),12,12)',[0,1]);
axis off;
end

Code to generate charsn:
function noisy_alphabet = generate_charsn(alphabet,noise_level)
% GENERATE_CHARSN � Create distorted patterns
%
% Arguments:
% alphabet - 35x31 matrix of 5x7 bit maps for each letter.
% noise_level - Number of bits which will be changed .
% Returns:
% noisy_alphabet - Alphabet with noise
% add noise to the original alphabet
noisy_alphabet = alphabet;
if noise_level~=0
size_image = length(alphabet(:,1));
% choose noise_level amount of random positions for each letter matrix
for i=1:size(alphabet,2)
R(i,:) = round(rand(1,noise_level)*(size_image-1)+1)+(i-1)*(size_image);
while length(unique(R(1,:)))< noise_level % prevent same random numbers to be generated
R(i,:) = round(rand(1,noise_level)*(size_image-1)+1)+(i-1)*(size_image);
end
end
% randomly change noise_level number of bits in each letter image : 0->1 and 1->0
noisy_alphabet(R) = imcomplement(alphabet(R));
end

This code is used in hopnet model:
131% Main script for problem_2b: Character Recognition using Hopfield network
clear all
clc
close all

[alphabet] = generate_chars;

net = create_network(alphabet);

[error,errorn,noise_range,recordn] = test_network(net,alphabet);

plot_result(error,errorn,noise_range,recordn);

Code is for plot result:
function plot_result( error,errorn,noise_range,recordn)
% PLOT_RESULT - Create displays of recognition error rate
%
% Arguments:
% error - Average error of the network tested without noise
% errorn -Average error of the network tested with noise
% noise_range - Noise levels
% recordn - Stable points evolving from the noisy start
% points with the range [0 1]
% Here is a plot showing the percentage of errors for the
% network testedwith no noise or with varying levels of noise.
%figure,
%plot(noise_range,error*100,'r',noise_range,errorn*100,'b','LineWidth',2);
%xlabel('Noise Level');
%ylabel('Percentage of Recognition Errors');
%legend('tested without noise','tested with noise',2);
% Here is a plot showing the result given by the Hopfield
% network whichevolves from noisy start points.
% image of recognized alphabet
text1='dddddd';
figure('position', [750 250 260 260]);
title(text1);

for i=1:size(recordn,2)
subplot(1,1,i);
colormap('bone');

imagesc(reshape(recordn(:,i),12,12)',[0,1]);
axis off;
end
Code to test network:
function [error,errorn,noise_range,recordn] = test_network(net,target)
k=input('enter the file name::');
s=[int2str(k),'.jpg']
a=imread(s);

b=im2bw(a,0.01);
b=b(any(b,2),:);
b=b(:,any(b));
imshow(b);
c=imresize(b,[12 12],'bilinear');

d=c';

f=reshape(d,[],1);
target=f;

T = imcomplement(imcomplement(target)*2);; % target -> {-1 1}
noise_range = 0:3;
max_test = 5;
error = [];
errorn = [];
steps = 20;
% PERFORM THE TEST
for noise_level = noise_range
%fprintf('Testing the network with( %d bits of noise ) or without noise, please wait...\n',noise_level);
e = 0;
en = 0;
for i=1:max_test
Tn= generate_charsn(T,noise_level);
record = [];
recordn = [];
for i=1:size(T,2);
% TEST NETWORK WITHOUT NOISE
[y,Pf,Af] = sim(net,{1 steps},{},{T(:,i)});
result = (y{steps}+1)/2; % transfor back to [0 1]
record = [record result];
% TEST NETWORK WITH NOISE
[yn,Pf,Af] = sim(net,{1 steps},{},{Tn(:,i)});
resultn = (yn{steps}+1)/2; % transfor back to [0 1]
recordn = [recordn resultn];
end
% accumutive recognition error
e = e + sum((any(record - target)));
en = en + sum((any(recordn - target)));
end
% AVERAGE ERRORS FOR max_test SETS OF TARGET VECTORS.
error = [error e/size(T,2)/max_test]
errorn= [errorn en/size(T,2)/max_test]
end
figure('position', [450 250 260 260]);

for i=1:size(target,2)
subplot(1,1,i);
colormap('bone')
title('iiii')
imagesc(reshape(target(:,i),12,12)',[0,1])
axis off;
end
